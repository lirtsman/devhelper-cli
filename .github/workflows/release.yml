name: Release

on:
  push:
    tags:
      - 'v*'

# Add explicit permissions block at the workflow level
permissions:
  contents: write  # Required for creating releases
  packages: write  # Required if you're publishing packages
  actions: read    # Required for running actions

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          # Completely disable caching to avoid "Cannot open: File exists" errors
          cache: false
          
      # Removed manual caching step completely

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: make test

      - name: Run linting
        run: |
          make install-lint-tools
          go vet ./...
          # Temporarily commenting out golangci-lint due to compatibility issues with Go 1.24
          # golangci-lint run

  build:
    name: Build and Release
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            output_name: devhelper-cli-linux-amd64
          - goos: darwin
            goarch: amd64
            output_name: devhelper-cli-darwin-amd64
          - goos: windows
            goarch: amd64
            output_name: devhelper-cli-windows-amd64.exe
          # Adding ARM64 builds for broader platform support
          - goos: linux
            goarch: arm64
            output_name: devhelper-cli-linux-arm64
          - goos: darwin
            goarch: arm64
            output_name: devhelper-cli-darwin-arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          # Completely disable caching to avoid "Cannot open: File exists" errors
          cache: false
          
      # Removed manual caching step completely

      - name: Get tag version
        id: get_version
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          CURRENT_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo "BUILD_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT
          COMMIT=$(git rev-parse HEAD || echo "unknown")
          echo "COMMIT=$COMMIT" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: go mod download

      - name: Build release artifacts
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          echo "Building for $GOOS/$GOARCH"
          go build -v -ldflags "-X github.com/lirtsman/devhelper-cli/cmd.Version=${{ steps.get_version.outputs.VERSION }} -X github.com/lirtsman/devhelper-cli/cmd.BuildDate=${{ steps.get_version.outputs.BUILD_DATE }} -X github.com/lirtsman/devhelper-cli/cmd.Commit=${{ steps.get_version.outputs.COMMIT }}" -o ${{ matrix.output_name }}
          # Make executable for Linux/macOS builds
          if [ "$GOOS" != "windows" ]; then chmod +x ${{ matrix.output_name }}; fi
          # Generate SHA256 checksum
          sha256sum ${{ matrix.output_name }} > ${{ matrix.output_name }}.sha256
          ls -la

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output_name }}
          path: |
            ${{ matrix.output_name }}
            ${{ matrix.output_name }}.sha256
          retention-days: 7

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: Display structure of downloaded files
        run: ls -R ./artifacts

      - name: Move artifacts to root directory
        run: |
          mkdir -p ./release-assets
          cp ./artifacts/devhelper-cli-linux-amd64/devhelper-cli-linux-amd64 ./release-assets/
          cp ./artifacts/devhelper-cli-darwin-amd64/devhelper-cli-darwin-amd64 ./release-assets/
          cp ./artifacts/devhelper-cli-windows-amd64.exe/devhelper-cli-windows-amd64.exe ./release-assets/
          
          # Copy ARM64 binaries if they exist
          if [ -d "./artifacts/devhelper-cli-linux-arm64" ]; then
            cp ./artifacts/devhelper-cli-linux-arm64/devhelper-cli-linux-arm64 ./release-assets/
          fi
          if [ -d "./artifacts/devhelper-cli-darwin-arm64" ]; then
            cp ./artifacts/devhelper-cli-darwin-arm64/devhelper-cli-darwin-arm64 ./release-assets/
          fi
          
          # Copy SHA256 files
          cp ./artifacts/devhelper-cli-linux-amd64/devhelper-cli-linux-amd64.sha256 ./release-assets/
          cp ./artifacts/devhelper-cli-darwin-amd64/devhelper-cli-darwin-amd64.sha256 ./release-assets/
          cp ./artifacts/devhelper-cli-windows-amd64.exe/devhelper-cli-windows-amd64.exe.sha256 ./release-assets/
          
          # Copy ARM64 SHA256 files if they exist
          if [ -f "./artifacts/devhelper-cli-linux-arm64/devhelper-cli-linux-arm64.sha256" ]; then
            cp ./artifacts/devhelper-cli-linux-arm64/devhelper-cli-linux-arm64.sha256 ./release-assets/
          fi
          if [ -f "./artifacts/devhelper-cli-darwin-arm64/devhelper-cli-darwin-arm64.sha256" ]; then
            cp ./artifacts/devhelper-cli-darwin-arm64/devhelper-cli-darwin-arm64.sha256 ./release-assets/
          fi
          
          # Make files executable
          chmod +x ./release-assets/devhelper-cli-linux-amd64
          chmod +x ./release-assets/devhelper-cli-darwin-amd64
          if [ -f "./release-assets/devhelper-cli-linux-arm64" ]; then
            chmod +x ./release-assets/devhelper-cli-linux-arm64
          fi
          if [ -f "./release-assets/devhelper-cli-darwin-arm64" ]; then
            chmod +x ./release-assets/devhelper-cli-darwin-arm64
          fi
          
          # Create a checksums.txt file for easier reference
          cd ./release-assets
          echo "# SHA256 Checksums for DevHelper CLI ${{ github.ref_name }}" > checksums.txt
          cat *.sha256 >> checksums.txt
          ls -la

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
          body: |
            # DevHelper CLI ${{ github.ref_name }}
            
            ## Installation Instructions
            
            ### Using Homebrew (macOS/Linux)
            ```bash
            # Add the tap (first time only)
            brew tap lirtsman/devhelper-cli
            
            # Install the CLI
            brew install devhelper-cli
            ```
            
            ### Manual Installation
            
            #### Linux
            ```bash
            curl -L https://github.com/lirtsman/devhelper-cli/releases/download/${{ github.ref_name }}/devhelper-cli-linux-amd64 -o /usr/local/bin/devhelper-cli
            chmod +x /usr/local/bin/devhelper-cli
            ```
            
            #### macOS
            ```bash
            curl -L https://github.com/lirtsman/devhelper-cli/releases/download/${{ github.ref_name }}/devhelper-cli-darwin-amd64 -o /usr/local/bin/devhelper-cli
            chmod +x /usr/local/bin/devhelper-cli
            ```
            
            #### Windows
            Download the `devhelper-cli-windows-amd64.exe` file and run it from the command line.
            
            ## Changes
            Please refer to [CHANGELOG.md](https://github.com/lirtsman/devhelper-cli/blob/main/CHANGELOG.md) for details.
            
            ## SHA256 Checksums
            SHA256 checksums for all binaries are provided in the checksums.txt file attached to this release.
          files: |
            ./release-assets/devhelper-cli-linux-amd64
            ./release-assets/devhelper-cli-darwin-amd64
            ./release-assets/devhelper-cli-windows-amd64.exe
            ./release-assets/devhelper-cli-linux-arm64
            ./release-assets/devhelper-cli-darwin-arm64
            ./release-assets/checksums.txt
            
      # Install GitHub CLI
      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh
            
      # Directly trigger the Homebrew update workflow
      - name: Update Homebrew Formula
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          
          # Trigger the homebrew update workflow using GitHub CLI
          gh workflow run update-homebrew.yml -f version=$VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 