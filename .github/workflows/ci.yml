name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.21']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for the version determination

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          # Use a clean cache key strategy to avoid tar errors
          cache: false

      # Set up manual caching with better control
      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Install dependencies
        run: go mod download

      - name: Test with coverage
        run: make test-coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          # Use a clean cache key strategy to avoid tar errors
          cache: false
          
      # Set up manual caching with better control
      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-1.21-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-1.21-

      - name: Install dependencies
        run: go mod download

      - name: Install golangci-lint
        run: make install-lint-tools

      - name: Run linting
        run: |
          make install-lint-tools
          go vet ./...
          # Temporarily commenting out golangci-lint due to compatibility issues with Go 1.24
          # golangci-lint run

  build:
    name: Build
    needs: [test, lint]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.21']
        include:
          - os: ubuntu-latest
            output_name: devhelper-cli-linux-amd64
            asset_name: devhelper-cli-linux-amd64
          - os: macos-latest
            output_name: devhelper-cli-darwin-amd64
            asset_name: devhelper-cli-darwin-amd64
          - os: windows-latest
            output_name: devhelper-cli-windows-amd64.exe
            asset_name: devhelper-cli-windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          # Use a clean cache key strategy to avoid tar errors
          cache: false
          
      # Set up manual caching with better control
      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Install dependencies
        run: go mod download

      # Get version for Windows
      - name: Get version (Windows)
        if: runner.os == 'Windows'
        id: get_version_windows
        shell: bash
        run: |
          VERSION=$(git describe --tags --always --dirty 2>nul || echo "v0.1.0")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          CURRENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "BUILD_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT
          COMMIT=$(git rev-parse HEAD || echo "unknown")
          echo "COMMIT=$COMMIT" >> $GITHUB_OUTPUT

      # Get version for Unix-like systems
      - name: Get version (Unix)
        if: runner.os != 'Windows'
        id: get_version_unix
        shell: bash
        run: |
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "v0.1.0")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          CURRENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "BUILD_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT
          COMMIT=$(git rev-parse HEAD || echo "unknown")
          echo "COMMIT=$COMMIT" >> $GITHUB_OUTPUT

      # Build for Windows
      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: |
          go build -ldflags "-X github.com/lirtsman/devhelper-cli/cmd.Version=${{ steps.get_version_windows.outputs.VERSION }} -X github.com/lirtsman/devhelper-cli/cmd.BuildDate=${{ steps.get_version_windows.outputs.BUILD_DATE }} -X github.com/lirtsman/devhelper-cli/cmd.Commit=${{ steps.get_version_windows.outputs.COMMIT }}" -o ${{ matrix.output_name }}

      # Build for Unix-like systems
      - name: Build (Unix)
        if: runner.os != 'Windows'
        run: |
          go build -ldflags "-X github.com/lirtsman/devhelper-cli/cmd.Version=${{ steps.get_version_unix.outputs.VERSION }} -X github.com/lirtsman/devhelper-cli/cmd.BuildDate=${{ steps.get_version_unix.outputs.BUILD_DATE }} -X github.com/lirtsman/devhelper-cli/cmd.Commit=${{ steps.get_version_unix.outputs.COMMIT }}" -o ${{ matrix.output_name }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.output_name }}
          retention-days: 7 